#!jinja2

[meta]
title = 'Optional outputs'
description = """
Designed to show how optional outputs could support a workflow making choices.

You need to use -s to set PLATFORM_A, PLATFORM_B and PLATFORM_AB when playing
this workflow*.

There are two tasks which act as examples of branching workflows:

which_computer
    Checks which platform to run a task on. This is designed to simulate
    a task which might check for files on two parallel systems and pick
    one for the follow up task.

copy_ancilliary_data
    Returns a message if the data isn't available. Don't recommend replacing
    failure with optional outputs routinely, but if there is a particular
    failure that you want to handle this is how you might do it.


* You may prefer to use -S with cylc install, in which cases your choices will
  be stored in opt/rose-suite-cylc-install.conf
"""
written for cylc version = 8.x
tested with cylc version = 8.0.3


[scheduler]
    allow implicit tasks = true

[scheduling]
    initial cycle point = 1000
    [[graph]]
        P1Y = """
            which_computer:machineA? => task_on_machineA?
            which_computer:machineB? => task_on_machineB?
            task_on_machineA? | task_on_machineB? => follow_on

            copy_ancilliary_data? => follow_on
            copy_ancilliary_data:not_available? => housekeep
            follow_on => housekeep
        """

[runtime]
    [[which_computer]]
        script = """
            # Might in reality be check for a file or grepping a file with
            # HPC statuses:

            if [[ $((RANDOM % 2)) == 0 ]]; then
                cylc message "${CYLC_WORKFLOW_ID}" "${CYLC_TASK_JOB}" "machineA"
            else
                cylc message "${CYLC_WORKFLOW_ID}" "${CYLC_TASK_JOB}" "machineB"
            fi
        """
        platform = hpc
        [[[outputs]]]
            machineA = machineA
            machineB = machineB

    [[copy_ancilliary_data]]
        script = some-script.py

        [[[outputs]]]
            # Tell cylc to listen for this message - it's an output.
            not_available = not_available


    [[task_on_machineA, task_on_machineB, follow_on, housekeep]]
        script = sleep 10
    [[task_on_machineA]]
        platform = hpc1
    [[task_on_machineB]]
        platform = hpc2
